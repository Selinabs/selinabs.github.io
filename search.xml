<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python函数篇]]></title>
    <url>%2F2019%2F12%2F06%2FPython%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[python函数1.python中的函数可以作为另一个函数的参数（实参）传入：1234567891011121314def f1(): print(&quot;f1被调用&quot;) def f2(): print(&quot;f2被调用&quot;） def fx(fn): print(&quot;fn绑定的函数是：&quot;, fn) #在fx内调用fn绑定的函数 fn() fx(f1)fx(f2)#其f1和f2作为fx的参数传递，所以f1、f2不能带括号 输出： 示例：1234567891011121314def hello(L): for i in L: print(&apos;欢迎 :&apos;, i)def goodbye(L): for i in L: print(&apos;再见：&apos;, i)def fx(fn, L): print(&quot;fx被调用&quot;) fn(L)fx(hello, [&apos;小明&apos;, &apos;小鹏&apos;, &apos;小花&apos;])fx(doodbye, [&apos;小狗&apos;, &apos;小猫&apos;, &apos;小鸡&apos;]) 输出： 2.Python中函数可以返回另一个函数示例：12345678910111213def get_op(): s = input(&apos;请输入您要执行的操作：&apos;) if s == &apos;最大值&apos;: return max elif s == &apos;最小值&apos;: return min elif s == &apos;求和&apos;: return sumL = [2, 4, 6, 8, 10]print(L)fn = get_op()print(fn(L)) 输出： 3.函数嵌套定义：** def语句的作用是用来创建一个函数 ** def语句可以写在函数内部，在函数执行时可以动态创建一个函数 示例：1234567891011121314def get_func(value): if value == 1: def myadd(x, y): return x + y return myadd elif value == 2: def mysub(x, y): return x - y return mysubfx = get_func(1)print(fx(400, 300))fx = get_func(2)print(fx(400, 300)) 输出： 4.Python函数中的全局变量和局部变量1.局部变量定义1、定义在函数内部的变量称为局部变量（函数的形参也是局部变量）2、局部变量只能在函数内部使用3、局部变量在函数调用时才能够被创建，在函数调用之后会自动销毁局部变量说明：1、在函数内首次对变量赋值是创建局部变量，再次为变量赋值是修改局部变量的绑定关系2、在函数内部的赋值语句不会对全局变量造成影响2.全局变量定义1、定义在函数外部，模块内部的变量称为全局变量2、全局变量，所有函数都可以直接访问（但函数内部不能直接修改全局变量的绑定关系）5.Python中的函数作用域作用域也叫命名空间，是访问变量时查找变量名的范围空间python的四个作用域 LEGB 作用域 英文解释 英文简写 局部作用域(函数内) Local(function) L 外部嵌套函数作用域 Enclosing function locals E 函数定义所在模块的作用域 Global(module) G Python内置模块的作用域 Builtin(python) B 示例：12345678910111213#全局变量v = 100def fun1(): v = 200 print(&quot;fun1里的v值是：&quot;, v) #定义另一个函数，然后进行调用 def fun2(): v = 300 print(&quot;fun2里的v值是：&quot;, v) fun2()fun1()print(&quot;全局v值是：&quot;, v) 运行结果： 示例：12345678910111213v = 100def fun1(): v = 200 print(&quot;fun1里的v值是：&quot;, v) #定义另一个函数，然后进行调用 def fun2(): #注释掉嵌套函数中的v值 #v = 300 print(&quot;fun2里的v值是：&quot;, v) fun2()fun1()print(&quot;全局v值是：&quot;, v) 输出： 变量名的查找规则（顺序）：1.查找本地变量2.查找包裹此函数的外部嵌套函数内部的变量3.全局变量4.内置变量globals() &amp; locals()函数globals()返回全局作用内变量的字典 locals()返回局部作用域内变量的字典 示例：1234567891011a = 100b = 200def fx(b, c): print(a, b, c) #思考在此函数内部能否获取到全局变量b绑定的值？ # g = globals() print(&quot;全局变量的字典是：&quot;, globals()) # l = locals() print(&quot;局部变量的字典是：&quot;, locals()) print(&quot;此处访问全局的b的值是：&quot;, globals()[&quot;b&quot;])fx(300, 400) 输出：]]></content>
      <categories>
        <category>Python函数</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Center OS安装python3]]></title>
    <url>%2F2019%2F10%2F01%2Fcenteros%E5%AE%89%E8%A3%85py3%2F</url>
    <content type="text"><![CDATA[1.安装依赖登陆到服务器后输入： python --version 查看现在系统默认的安装的python版本，然后输入： sudo yum -y install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel zlib-devel libffi-devel MySQL-python mysql-devel 回车开始安装。 2.下载python安装包首先在用户目录下新建一个文件夹： mkdir {folder name} 进入新建的文件夹下，输入： wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz 回车开始下载，文件比较大，网络速度可能也比较慢，所以需要等一会。 3.安装python先解压缩下载好的tgz文件，输入： tar -zxvf {packagename} 回车开始解压。解压好之后当前文件夹下回有一个新的文件夹，cd进入新的文件夹： cd {new folder name} 然后指定python3的安装路径： ./configure --prefix={path} 回车后系统会自动设置，完成后接着输入： make make是一个编译命令，编译完成后输入： sudo make install 进行安装。 4.添加系统变量添加python系统变量输入： sudo ln -s {user python path} /usr/bin/python3 回车完成添加。然后还需要添加pip3系统变量： sudo ln -s {user pip3 path} /usr/bin/pip3 回车完成添加。到此为止，python3已经安装完成，可以进行开发和使用了。]]></content>
      <categories>
        <category>基础篇</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>center OS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在GitHub上搭建自己的博客网站]]></title>
    <url>%2F2019%2F09%2F29%2F%E5%9C%A8GitHub%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[1.工具准备node.js、GitHub账号以及一个可以用的顺手的文件编辑器（因为要修改一些配置文件）node.js安装好后在命令行键入： npm -v 来检测环境是否安装完成。 2.安装hexo博客框架命令行键入： npm install -g hexo-cli 安装完成之后确保环境变量配置正确，可以正常使用’hexo’命令。 3.开始搭建，初始化项目首先命令行转到你要建立项目的磁盘，然后键入： hexo init {projectname} 现在目标磁盘就有了刚才我们新建的项目文件夹，进入项目根目录输入： hexo generate 对hexo编译成HTML代码，然后输入： hexo server 现在项目就运行起来了，打开输出的本地网址就能看到项目运行的效果了。]]></content>
      <categories>
        <category>实战篇</category>
      </categories>
      <tags>
        <tag>github,web,博客</tag>
      </tags>
  </entry>
</search>
