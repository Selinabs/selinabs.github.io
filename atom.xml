<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SelinaSource</title>
  
  <subtitle>自己的小天地</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-06T13:06:33.064Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>梓轩</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python函数篇</title>
    <link href="http://yoursite.com/2019/12/06/Python%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/12/06/Python函数/</id>
    <published>2019-12-06T13:01:47.977Z</published>
    <updated>2019-12-06T13:06:33.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python函数"><a href="#python函数" class="headerlink" title="python函数"></a>python函数</h2><h2 id="1-python中的函数可以作为另一个函数的参数（实参）传入："><a href="#1-python中的函数可以作为另一个函数的参数（实参）传入：" class="headerlink" title="1.python中的函数可以作为另一个函数的参数（实参）传入："></a>1.python中的函数可以作为另一个函数的参数（实参）传入：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def f1():</span><br><span class="line">    print(&quot;f1被调用&quot;)</span><br><span class="line">    </span><br><span class="line">def f2():</span><br><span class="line">    print(&quot;f2被调用&quot;）</span><br><span class="line">    </span><br><span class="line">def fx(fn):</span><br><span class="line">    print(&quot;fn绑定的函数是：&quot;, fn)</span><br><span class="line">    #在fx内调用fn绑定的函数</span><br><span class="line">    fn()</span><br><span class="line">    </span><br><span class="line">fx(f1)</span><br><span class="line">fx(f2)</span><br><span class="line">#其f1和f2作为fx的参数传递，所以f1、f2不能带括号</span><br></pre></td></tr></table></figure><h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><p><img src="https://selinapic.oss-cn-beijing.aliyuncs.com/Pic/输出1.png" alt></p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def hello(L):</span><br><span class="line">    for i in L:</span><br><span class="line">        print(&apos;欢迎 :&apos;, i)</span><br><span class="line"></span><br><span class="line">def goodbye(L):</span><br><span class="line">    for i in L:</span><br><span class="line">        print(&apos;再见：&apos;, i)</span><br><span class="line"></span><br><span class="line">def fx(fn, L):</span><br><span class="line">    print(&quot;fx被调用&quot;)</span><br><span class="line">    fn(L)</span><br><span class="line"></span><br><span class="line">fx(hello, [&apos;小明&apos;, &apos;小鹏&apos;, &apos;小花&apos;])</span><br><span class="line">fx(doodbye, [&apos;小狗&apos;, &apos;小猫&apos;, &apos;小鸡&apos;])</span><br></pre></td></tr></table></figure><h4 id="输出：-1"><a href="#输出：-1" class="headerlink" title="输出："></a>输出：</h4><p><img src="https://selinapic.oss-cn-beijing.aliyuncs.com/Pic/输出2.png" alt></p><h2 id="2-Python中函数可以返回另一个函数"><a href="#2-Python中函数可以返回另一个函数" class="headerlink" title="2.Python中函数可以返回另一个函数"></a>2.Python中函数可以返回另一个函数</h2><h3 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def get_op():</span><br><span class="line">    s = input(&apos;请输入您要执行的操作：&apos;)</span><br><span class="line">    if s == &apos;最大值&apos;:</span><br><span class="line">        return max</span><br><span class="line">    elif s == &apos;最小值&apos;:</span><br><span class="line">        return min</span><br><span class="line">    elif s == &apos;求和&apos;:</span><br><span class="line">        return sum</span><br><span class="line"></span><br><span class="line">L = [2, 4, 6, 8, 10]</span><br><span class="line">print(L)</span><br><span class="line">fn = get_op()</span><br><span class="line">print(fn(L))</span><br></pre></td></tr></table></figure><h4 id="输出：-2"><a href="#输出：-2" class="headerlink" title="输出："></a>输出：</h4><p><img src="https://selinapic.oss-cn-beijing.aliyuncs.com/Pic/输出3.png" alt></p><h2 id="3-函数嵌套定义："><a href="#3-函数嵌套定义：" class="headerlink" title="3.函数嵌套定义："></a>3.函数嵌套定义：</h2><pre><code>**  def语句的作用是用来创建一个函数**  def语句可以写在函数内部，在函数执行时可以动态创建一个函数</code></pre><h3 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def get_func(value):</span><br><span class="line">    if value == 1:</span><br><span class="line">        def myadd(x, y):</span><br><span class="line">            return x + y</span><br><span class="line">        return myadd</span><br><span class="line">    elif value == 2:</span><br><span class="line">        def mysub(x, y):</span><br><span class="line">            return x - y</span><br><span class="line">        return mysub</span><br><span class="line"></span><br><span class="line">fx = get_func(1)</span><br><span class="line">print(fx(400, 300))</span><br><span class="line">fx = get_func(2)</span><br><span class="line">print(fx(400, 300))</span><br></pre></td></tr></table></figure><h4 id="输出：-3"><a href="#输出：-3" class="headerlink" title="输出："></a>输出：</h4><p><img src="https://selinapic.oss-cn-beijing.aliyuncs.com/Pic/输出4.png" alt></p><h2 id="4-Python函数中的全局变量和局部变量"><a href="#4-Python函数中的全局变量和局部变量" class="headerlink" title="4.Python函数中的全局变量和局部变量"></a>4.Python函数中的全局变量和局部变量</h2><h3 id="1-局部变量定义"><a href="#1-局部变量定义" class="headerlink" title="1.局部变量定义"></a>1.局部变量定义</h3><h6 id="1、定义在函数内部的变量称为局部变量（函数的形参也是局部变量）"><a href="#1、定义在函数内部的变量称为局部变量（函数的形参也是局部变量）" class="headerlink" title="1、定义在函数内部的变量称为局部变量（函数的形参也是局部变量）"></a>1、定义在函数内部的变量称为局部变量（函数的形参也是局部变量）</h6><h6 id="2、局部变量只能在函数内部使用"><a href="#2、局部变量只能在函数内部使用" class="headerlink" title="2、局部变量只能在函数内部使用"></a>2、局部变量只能在函数内部使用</h6><h6 id="3、局部变量在函数调用时才能够被创建，在函数调用之后会自动销毁"><a href="#3、局部变量在函数调用时才能够被创建，在函数调用之后会自动销毁" class="headerlink" title="3、局部变量在函数调用时才能够被创建，在函数调用之后会自动销毁"></a>3、局部变量在函数调用时才能够被创建，在函数调用之后会自动销毁</h6><h3 id="局部变量说明："><a href="#局部变量说明：" class="headerlink" title="局部变量说明："></a>局部变量说明：</h3><h6 id="1、在函数内首次对变量赋值是创建局部变量，再次为变量赋值是修改局部变量的绑定关系"><a href="#1、在函数内首次对变量赋值是创建局部变量，再次为变量赋值是修改局部变量的绑定关系" class="headerlink" title="1、在函数内首次对变量赋值是创建局部变量，再次为变量赋值是修改局部变量的绑定关系"></a>1、在函数内首次对变量赋值是创建局部变量，再次为变量赋值是修改局部变量的绑定关系</h6><h6 id="2、在函数内部的赋值语句不会对全局变量造成影响"><a href="#2、在函数内部的赋值语句不会对全局变量造成影响" class="headerlink" title="2、在函数内部的赋值语句不会对全局变量造成影响"></a>2、在函数内部的赋值语句不会对全局变量造成影响</h6><h3 id="2-全局变量定义"><a href="#2-全局变量定义" class="headerlink" title="2.全局变量定义"></a>2.全局变量定义</h3><h6 id="1、定义在函数外部，模块内部的变量称为全局变量"><a href="#1、定义在函数外部，模块内部的变量称为全局变量" class="headerlink" title="1、定义在函数外部，模块内部的变量称为全局变量"></a>1、定义在函数外部，模块内部的变量称为全局变量</h6><h6 id="2、全局变量，所有函数都可以直接访问（但函数内部不能直接修改全局变量的绑定关系）"><a href="#2、全局变量，所有函数都可以直接访问（但函数内部不能直接修改全局变量的绑定关系）" class="headerlink" title="2、全局变量，所有函数都可以直接访问（但函数内部不能直接修改全局变量的绑定关系）"></a>2、全局变量，所有函数都可以直接访问（但函数内部不能直接修改全局变量的绑定关系）</h6><h2 id="5-Python中的函数作用域"><a href="#5-Python中的函数作用域" class="headerlink" title="5.Python中的函数作用域"></a>5.Python中的函数作用域</h2><h6 id="作用域也叫命名空间，是访问变量时查找变量名的范围空间"><a href="#作用域也叫命名空间，是访问变量时查找变量名的范围空间" class="headerlink" title="作用域也叫命名空间，是访问变量时查找变量名的范围空间"></a>作用域也叫命名空间，是访问变量时查找变量名的范围空间</h6><h3 id="python的四个作用域-LEGB"><a href="#python的四个作用域-LEGB" class="headerlink" title="python的四个作用域 LEGB"></a>python的四个作用域 LEGB</h3><div class="table-container"><table><thead><tr><th style="text-align:center">作用域</th><th style="text-align:center">英文解释</th><th style="text-align:center">英文简写</th></tr></thead><tbody><tr><td style="text-align:center">局部作用域(函数内)</td><td style="text-align:center">Local(function)</td><td style="text-align:center">L</td></tr><tr><td style="text-align:center">外部嵌套函数作用域</td><td style="text-align:center">Enclosing function locals</td><td style="text-align:center">E</td></tr><tr><td style="text-align:center">函数定义所在模块的作用域</td><td style="text-align:center">Global(module)</td><td style="text-align:center">G</td></tr><tr><td style="text-align:center">Python内置模块的作用域</td><td style="text-align:center">Builtin(python)</td><td style="text-align:center">B</td></tr></tbody></table></div><h3 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#全局变量</span><br><span class="line">v = 100</span><br><span class="line">def fun1():</span><br><span class="line">    v = 200</span><br><span class="line">    print(&quot;fun1里的v值是：&quot;, v)</span><br><span class="line">    #定义另一个函数，然后进行调用</span><br><span class="line">    def fun2():</span><br><span class="line">        v = 300</span><br><span class="line">        print(&quot;fun2里的v值是：&quot;, v)</span><br><span class="line">    fun2()</span><br><span class="line"></span><br><span class="line">fun1()</span><br><span class="line">print(&quot;全局v值是：&quot;, v)</span><br></pre></td></tr></table></figure><h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><p><img src="https://selinapic.oss-cn-beijing.aliyuncs.com/Pic/输出5.png" alt></p><h3 id="示例：-4"><a href="#示例：-4" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">v = 100</span><br><span class="line">def fun1():</span><br><span class="line">    v = 200</span><br><span class="line">    print(&quot;fun1里的v值是：&quot;, v)</span><br><span class="line">    #定义另一个函数，然后进行调用</span><br><span class="line">    def fun2():</span><br><span class="line">        #注释掉嵌套函数中的v值</span><br><span class="line">        #v = 300</span><br><span class="line">        print(&quot;fun2里的v值是：&quot;, v)</span><br><span class="line">    fun2()</span><br><span class="line"></span><br><span class="line">fun1()</span><br><span class="line">print(&quot;全局v值是：&quot;, v)</span><br></pre></td></tr></table></figure><h3 id="输出：-4"><a href="#输出：-4" class="headerlink" title="输出："></a>输出：</h3><p><img src="https://selinapic.oss-cn-beijing.aliyuncs.com/Pic/输出6.png" alt></p><h2 id="变量名的查找规则（顺序）："><a href="#变量名的查找规则（顺序）：" class="headerlink" title="变量名的查找规则（顺序）："></a>变量名的查找规则（顺序）：</h2><h4 id="1-查找本地变量"><a href="#1-查找本地变量" class="headerlink" title="1.查找本地变量"></a>1.查找本地变量</h4><h4 id="2-查找包裹此函数的外部嵌套函数内部的变量"><a href="#2-查找包裹此函数的外部嵌套函数内部的变量" class="headerlink" title="2.查找包裹此函数的外部嵌套函数内部的变量"></a>2.查找包裹此函数的外部嵌套函数内部的变量</h4><h4 id="3-全局变量"><a href="#3-全局变量" class="headerlink" title="3.全局变量"></a>3.全局变量</h4><h4 id="4-内置变量"><a href="#4-内置变量" class="headerlink" title="4.内置变量"></a>4.内置变量</h4><h4 id="globals-amp-locals-函数"><a href="#globals-amp-locals-函数" class="headerlink" title="globals() &amp; locals()函数"></a><em>globals</em>() &amp; <em>locals</em>()函数</h4><pre><code>globals()返回全局作用内变量的字典locals()返回局部作用域内变量的字典</code></pre><h3 id="示例：-5"><a href="#示例：-5" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = 100</span><br><span class="line">b = 200</span><br><span class="line">def fx(b, c):</span><br><span class="line">    print(a, b, c)</span><br><span class="line">    #思考在此函数内部能否获取到全局变量b绑定的值？</span><br><span class="line">    # g = globals()</span><br><span class="line">    print(&quot;全局变量的字典是：&quot;, globals())</span><br><span class="line">    # l = locals()</span><br><span class="line">    print(&quot;局部变量的字典是：&quot;, locals())</span><br><span class="line">    print(&quot;此处访问全局的b的值是：&quot;, globals()[&quot;b&quot;])</span><br><span class="line">fx(300, 400)</span><br></pre></td></tr></table></figure><h3 id="输出：-5"><a href="#输出：-5" class="headerlink" title="输出："></a>输出：</h3><p><img src="https://selinapic.oss-cn-beijing.aliyuncs.com/Pic/输出7.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python函数&quot;&gt;&lt;a href=&quot;#python函数&quot; class=&quot;headerlink&quot; title=&quot;python函数&quot;&gt;&lt;/a&gt;python函数&lt;/h2&gt;&lt;h2 id=&quot;1-python中的函数可以作为另一个函数的参数（实参）传入：&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="Python函数" scheme="http://yoursite.com/categories/Python%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Center OS安装python3</title>
    <link href="http://yoursite.com/2019/10/01/centeros%E5%AE%89%E8%A3%85py3/"/>
    <id>http://yoursite.com/2019/10/01/centeros安装py3/</id>
    <published>2019-10-01T05:36:11.571Z</published>
    <updated>2019-10-01T06:30:54.598Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h5><p>登陆到服务器后输入：</p><pre><code>        python --version</code></pre><p>查看现在系统默认的安装的<strong>python</strong>版本，然后输入：</p><pre><code>        sudo yum -y install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel zlib-devel libffi-devel MySQL-python mysql-devel</code></pre><p>回车开始安装。</p><h5 id="2-下载python安装包"><a href="#2-下载python安装包" class="headerlink" title="2.下载python安装包"></a>2.下载<strong>python</strong>安装包</h5><p>首先在用户目录下新建一个文件夹：</p><pre><code>        mkdir {folder name}</code></pre><p>进入新建的文件夹下，输入：</p><pre><code>        wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz</code></pre><p>回车开始下载，文件比较大，网络速度可能也比较慢，所以需要等一会。</p><h5 id="3-安装python"><a href="#3-安装python" class="headerlink" title="3.安装python"></a>3.安装python</h5><p>先解压缩下载好的<strong>tgz</strong>文件，输入：</p><pre><code>        tar -zxvf {packagename}</code></pre><p>回车开始解压。解压好之后当前文件夹下回有一个新的文件夹，<strong>cd</strong>进入新的文件夹：</p><pre><code>        cd {new folder name}</code></pre><p>然后指定python3的安装路径：</p><pre><code>        ./configure --prefix={path}</code></pre><p>回车后系统会自动设置，完成后接着输入：</p><pre><code>            make</code></pre><p>make是一个编译命令，编译完成后输入：</p><pre><code>            sudo make install</code></pre><p>进行安装。</p><h5 id="4-添加系统变量"><a href="#4-添加系统变量" class="headerlink" title="4.添加系统变量"></a>4.添加系统变量</h5><p>添加<strong>python</strong>系统变量输入：</p><pre><code>        sudo ln -s {user python path} /usr/bin/python3</code></pre><p>回车完成添加。然后还需要添加<strong>pip3</strong>系统变量：</p><pre><code>        sudo ln -s {user pip3 path} /usr/bin/pip3</code></pre><p>回车完成添加。<br>到此为止，python3已经安装完成，可以进行开发和使用了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;1-安装依赖&quot;&gt;&lt;a href=&quot;#1-安装依赖&quot; class=&quot;headerlink&quot; title=&quot;1.安装依赖&quot;&gt;&lt;/a&gt;1.安装依赖&lt;/h5&gt;&lt;p&gt;登陆到服务器后输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        python --version
&lt;/c
      
    
    </summary>
    
    
      <category term="基础篇" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="center OS" scheme="http://yoursite.com/tags/center-OS/"/>
    
  </entry>
  
  <entry>
    <title>在GitHub上搭建自己的博客网站</title>
    <link href="http://yoursite.com/2019/09/29/%E5%9C%A8GitHub%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2019/09/29/在GitHub上搭建自己的博客网站/</id>
    <published>2019-09-29T13:24:14.000Z</published>
    <updated>2019-09-29T14:39:40.511Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-工具准备"><a href="#1-工具准备" class="headerlink" title="1.工具准备"></a>1.工具准备</h5><p>node.js、GitHub账号以及一个可以用的顺手的文件编辑器（因为要修改一些配置文件）<br>node.js安装好后在命令行键入：</p><pre><code>            npm -v</code></pre><p>来检测环境是否安装完成。</p><h5 id="2-安装hexo博客框架"><a href="#2-安装hexo博客框架" class="headerlink" title="2.安装hexo博客框架"></a>2.安装hexo博客框架</h5><p>命令行键入：</p><pre><code>            npm  install -g hexo-cli</code></pre><p>安装完成之后确保环境变量配置正确，可以正常使用’hexo’命令。</p><h5 id="3-开始搭建，初始化项目"><a href="#3-开始搭建，初始化项目" class="headerlink" title="3.开始搭建，初始化项目"></a>3.开始搭建，初始化项目</h5><p>首先命令行转到你要建立项目的磁盘，然后键入：</p><pre><code>            hexo init {projectname}</code></pre><p>现在目标磁盘就有了刚才我们新建的项目文件夹，进入项目根目录输入：</p><pre><code>            hexo generate</code></pre><p>对hexo编译成HTML代码，然后输入：</p><pre><code>            hexo server</code></pre><p>现在项目就运行起来了，打开输出的本地网址就能看到项目运行的效果了。<br><img src="./images/Snipaste_2019-09-29_22-01-49.png" alt="enter description here"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;1-工具准备&quot;&gt;&lt;a href=&quot;#1-工具准备&quot; class=&quot;headerlink&quot; title=&quot;1.工具准备&quot;&gt;&lt;/a&gt;1.工具准备&lt;/h5&gt;&lt;p&gt;node.js、GitHub账号以及一个可以用的顺手的文件编辑器（因为要修改一些配置文件）&lt;br&gt;node.
      
    
    </summary>
    
    
      <category term="实战篇" scheme="http://yoursite.com/categories/%E5%AE%9E%E6%88%98%E7%AF%87/"/>
    
    
      <category term="github,web,博客" scheme="http://yoursite.com/tags/github-web-%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
